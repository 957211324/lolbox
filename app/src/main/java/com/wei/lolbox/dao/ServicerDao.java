package com.wei.lolbox.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wei.lolbox.model.discover.Servicer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERVICER".
*/
public class ServicerDao extends AbstractDao<Servicer, String> {

    public static final String TABLENAME = "SERVICER";

    /**
     * Properties of entity Servicer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pinyin = new Property(0, String.class, "pinyin", false, "PINYIN");
        public final static Property Area_id = new Property(1, int.class, "area_id", false, "AREA_ID");
        public final static Property Server_name = new Property(2, String.class, "server_name", false, "SERVER_NAME");
        public final static Property Alias = new Property(3, String.class, "alias", true, "ALIAS");
    }


    public ServicerDao(DaoConfig config) {
        super(config);
    }
    
    public ServicerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERVICER\" (" + //
                "\"PINYIN\" TEXT," + // 0: pinyin
                "\"AREA_ID\" INTEGER NOT NULL ," + // 1: area_id
                "\"SERVER_NAME\" TEXT," + // 2: server_name
                "\"ALIAS\" TEXT PRIMARY KEY NOT NULL );"); // 3: alias
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVICER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Servicer entity) {
        stmt.clearBindings();
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(1, pinyin);
        }
        stmt.bindLong(2, entity.getArea_id());
 
        String server_name = entity.getServer_name();
        if (server_name != null) {
            stmt.bindString(3, server_name);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Servicer entity) {
        stmt.clearBindings();
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(1, pinyin);
        }
        stmt.bindLong(2, entity.getArea_id());
 
        String server_name = entity.getServer_name();
        if (server_name != null) {
            stmt.bindString(3, server_name);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public Servicer readEntity(Cursor cursor, int offset) {
        Servicer entity = new Servicer( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // pinyin
            cursor.getInt(offset + 1), // area_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // server_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // alias
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Servicer entity, int offset) {
        entity.setPinyin(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setArea_id(cursor.getInt(offset + 1));
        entity.setServer_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlias(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Servicer entity, long rowId) {
        return entity.getAlias();
    }
    
    @Override
    public String getKey(Servicer entity) {
        if(entity != null) {
            return entity.getAlias();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Servicer entity) {
        return entity.getAlias() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
