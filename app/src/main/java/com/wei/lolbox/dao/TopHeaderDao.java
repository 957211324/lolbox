package com.wei.lolbox.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wei.lolbox.model.msg.TopHeader;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOP_HEADER".
*/
public class TopHeaderDao extends AbstractDao<TopHeader, String> {

    public static final String TABLENAME = "TOP_HEADER";

    /**
     * Properties of entity TopHeader.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Weight = new Property(1, String.class, "weight", false, "WEIGHT");
        public final static Property Created = new Property(2, String.class, "created", false, "CREATED");
        public final static Property Photo = new Property(3, String.class, "photo", false, "PHOTO");
        public final static Property ArtId = new Property(4, String.class, "artId", false, "ART_ID");
        public final static Property CommentSum = new Property(5, String.class, "commentSum", false, "COMMENT_SUM");
        public final static Property CommentUrl = new Property(6, String.class, "commentUrl", false, "COMMENT_URL");
        public final static Property DestUrl = new Property(7, String.class, "destUrl", false, "DEST_URL");
    }


    public TopHeaderDao(DaoConfig config) {
        super(config);
    }
    
    public TopHeaderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOP_HEADER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"WEIGHT\" TEXT," + // 1: weight
                "\"CREATED\" TEXT," + // 2: created
                "\"PHOTO\" TEXT," + // 3: photo
                "\"ART_ID\" TEXT," + // 4: artId
                "\"COMMENT_SUM\" TEXT," + // 5: commentSum
                "\"COMMENT_URL\" TEXT," + // 6: commentUrl
                "\"DEST_URL\" TEXT);"); // 7: destUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOP_HEADER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TopHeader entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(2, weight);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(3, created);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
 
        String artId = entity.getArtId();
        if (artId != null) {
            stmt.bindString(5, artId);
        }
 
        String commentSum = entity.getCommentSum();
        if (commentSum != null) {
            stmt.bindString(6, commentSum);
        }
 
        String commentUrl = entity.getCommentUrl();
        if (commentUrl != null) {
            stmt.bindString(7, commentUrl);
        }
 
        String destUrl = entity.getDestUrl();
        if (destUrl != null) {
            stmt.bindString(8, destUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TopHeader entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(2, weight);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(3, created);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
 
        String artId = entity.getArtId();
        if (artId != null) {
            stmt.bindString(5, artId);
        }
 
        String commentSum = entity.getCommentSum();
        if (commentSum != null) {
            stmt.bindString(6, commentSum);
        }
 
        String commentUrl = entity.getCommentUrl();
        if (commentUrl != null) {
            stmt.bindString(7, commentUrl);
        }
 
        String destUrl = entity.getDestUrl();
        if (destUrl != null) {
            stmt.bindString(8, destUrl);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TopHeader readEntity(Cursor cursor, int offset) {
        TopHeader entity = new TopHeader( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // weight
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // created
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // artId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // commentSum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // commentUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // destUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TopHeader entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWeight(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreated(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArtId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommentSum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCommentUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDestUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TopHeader entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(TopHeader entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TopHeader entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
