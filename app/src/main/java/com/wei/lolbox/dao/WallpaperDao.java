package com.wei.lolbox.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wei.lolbox.model.msg.Wallpaper;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WALLPAPER".
*/
public class WallpaperDao extends AbstractDao<Wallpaper, String> {

    public static final String TABLENAME = "WALLPAPER";

    /**
     * Properties of entity Wallpaper.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GalleryId = new Property(0, String.class, "galleryId", true, "GALLERY_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property CoverUrl = new Property(3, String.class, "coverUrl", false, "COVER_URL");
        public final static Property CoverWidth = new Property(4, int.class, "coverWidth", false, "COVER_WIDTH");
        public final static Property CoverHeight = new Property(5, int.class, "coverHeight", false, "COVER_HEIGHT");
        public final static Property Created = new Property(6, String.class, "created", false, "CREATED");
        public final static Property Updated = new Property(7, String.class, "updated", false, "UPDATED");
        public final static Property Picsum = new Property(8, String.class, "picsum", false, "PICSUM");
        public final static Property CommentCount = new Property(9, String.class, "commentCount", false, "COMMENT_COUNT");
        public final static Property Clicks = new Property(10, String.class, "clicks", false, "CLICKS");
        public final static Property Modify_time = new Property(11, String.class, "modify_time", false, "MODIFY_TIME");
        public final static Property DestUrl = new Property(12, String.class, "destUrl", false, "DEST_URL");
    }


    public WallpaperDao(DaoConfig config) {
        super(config);
    }
    
    public WallpaperDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WALLPAPER\" (" + //
                "\"GALLERY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: galleryId
                "\"TITLE\" TEXT," + // 1: title
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"COVER_URL\" TEXT," + // 3: coverUrl
                "\"COVER_WIDTH\" INTEGER NOT NULL ," + // 4: coverWidth
                "\"COVER_HEIGHT\" INTEGER NOT NULL ," + // 5: coverHeight
                "\"CREATED\" TEXT," + // 6: created
                "\"UPDATED\" TEXT," + // 7: updated
                "\"PICSUM\" TEXT," + // 8: picsum
                "\"COMMENT_COUNT\" TEXT," + // 9: commentCount
                "\"CLICKS\" TEXT," + // 10: clicks
                "\"MODIFY_TIME\" TEXT," + // 11: modify_time
                "\"DEST_URL\" TEXT);"); // 12: destUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WALLPAPER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Wallpaper entity) {
        stmt.clearBindings();
 
        String galleryId = entity.getGalleryId();
        if (galleryId != null) {
            stmt.bindString(1, galleryId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(4, coverUrl);
        }
        stmt.bindLong(5, entity.getCoverWidth());
        stmt.bindLong(6, entity.getCoverHeight());
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(7, created);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(8, updated);
        }
 
        String picsum = entity.getPicsum();
        if (picsum != null) {
            stmt.bindString(9, picsum);
        }
 
        String commentCount = entity.getCommentCount();
        if (commentCount != null) {
            stmt.bindString(10, commentCount);
        }
 
        String clicks = entity.getClicks();
        if (clicks != null) {
            stmt.bindString(11, clicks);
        }
 
        String modify_time = entity.getModify_time();
        if (modify_time != null) {
            stmt.bindString(12, modify_time);
        }
 
        String destUrl = entity.getDestUrl();
        if (destUrl != null) {
            stmt.bindString(13, destUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Wallpaper entity) {
        stmt.clearBindings();
 
        String galleryId = entity.getGalleryId();
        if (galleryId != null) {
            stmt.bindString(1, galleryId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(4, coverUrl);
        }
        stmt.bindLong(5, entity.getCoverWidth());
        stmt.bindLong(6, entity.getCoverHeight());
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(7, created);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(8, updated);
        }
 
        String picsum = entity.getPicsum();
        if (picsum != null) {
            stmt.bindString(9, picsum);
        }
 
        String commentCount = entity.getCommentCount();
        if (commentCount != null) {
            stmt.bindString(10, commentCount);
        }
 
        String clicks = entity.getClicks();
        if (clicks != null) {
            stmt.bindString(11, clicks);
        }
 
        String modify_time = entity.getModify_time();
        if (modify_time != null) {
            stmt.bindString(12, modify_time);
        }
 
        String destUrl = entity.getDestUrl();
        if (destUrl != null) {
            stmt.bindString(13, destUrl);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Wallpaper readEntity(Cursor cursor, int offset) {
        Wallpaper entity = new Wallpaper( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // galleryId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coverUrl
            cursor.getInt(offset + 4), // coverWidth
            cursor.getInt(offset + 5), // coverHeight
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // created
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updated
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // picsum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // commentCount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // clicks
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // modify_time
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // destUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Wallpaper entity, int offset) {
        entity.setGalleryId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCoverUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoverWidth(cursor.getInt(offset + 4));
        entity.setCoverHeight(cursor.getInt(offset + 5));
        entity.setCreated(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdated(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPicsum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCommentCount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClicks(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setModify_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDestUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Wallpaper entity, long rowId) {
        return entity.getGalleryId();
    }
    
    @Override
    public String getKey(Wallpaper entity) {
        if(entity != null) {
            return entity.getGalleryId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Wallpaper entity) {
        return entity.getGalleryId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
