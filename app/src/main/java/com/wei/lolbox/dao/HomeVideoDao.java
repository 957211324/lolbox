package com.wei.lolbox.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wei.lolbox.model.home.HomeVideo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_VIDEO".
*/
public class HomeVideoDao extends AbstractDao<HomeVideo, String> {

    public static final String TABLENAME = "HOME_VIDEO";

    /**
     * Properties of entity HomeVideo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Tag = new Property(1, String.class, "tag", false, "TAG");
        public final static Property Audit = new Property(2, int.class, "audit", false, "AUDIT");
        public final static Property Cover = new Property(3, String.class, "cover", false, "COVER");
        public final static Property CreateTime = new Property(4, long.class, "createTime", false, "CREATE_TIME");
        public final static Property GifCover = new Property(5, String.class, "gifCover", false, "GIF_COVER");
        public final static Property AccountName = new Property(6, String.class, "accountName", false, "ACCOUNT_NAME");
        public final static Property AccountImg = new Property(7, String.class, "accountImg", false, "ACCOUNT_IMG");
        public final static Property Url_video = new Property(8, String.class, "url_video", false, "URL_VIDEO");
        public final static Property Height = new Property(9, int.class, "height", false, "HEIGHT");
        public final static Property Len = new Property(10, String.class, "len", false, "LEN");
        public final static Property MomId = new Property(11, long.class, "momId", false, "MOM_ID");
        public final static Property PlayCount = new Property(12, String.class, "playCount", false, "PLAY_COUNT");
        public final static Property Title = new Property(13, String.class, "title", false, "TITLE");
        public final static Property VideoId = new Property(14, int.class, "videoId", false, "VIDEO_ID");
        public final static Property Width = new Property(15, int.class, "width", false, "WIDTH");
    }


    public HomeVideoDao(DaoConfig config) {
        super(config);
    }
    
    public HomeVideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_VIDEO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TAG\" TEXT," + // 1: tag
                "\"AUDIT\" INTEGER NOT NULL ," + // 2: audit
                "\"COVER\" TEXT," + // 3: cover
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 4: createTime
                "\"GIF_COVER\" TEXT," + // 5: gifCover
                "\"ACCOUNT_NAME\" TEXT," + // 6: accountName
                "\"ACCOUNT_IMG\" TEXT," + // 7: accountImg
                "\"URL_VIDEO\" TEXT," + // 8: url_video
                "\"HEIGHT\" INTEGER NOT NULL ," + // 9: height
                "\"LEN\" TEXT," + // 10: len
                "\"MOM_ID\" INTEGER NOT NULL ," + // 11: momId
                "\"PLAY_COUNT\" TEXT," + // 12: playCount
                "\"TITLE\" TEXT," + // 13: title
                "\"VIDEO_ID\" INTEGER NOT NULL ," + // 14: videoId
                "\"WIDTH\" INTEGER NOT NULL );"); // 15: width
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_VIDEO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeVideo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }
        stmt.bindLong(3, entity.getAudit());
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(4, cover);
        }
        stmt.bindLong(5, entity.getCreateTime());
 
        String gifCover = entity.getGifCover();
        if (gifCover != null) {
            stmt.bindString(6, gifCover);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(7, accountName);
        }
 
        String accountImg = entity.getAccountImg();
        if (accountImg != null) {
            stmt.bindString(8, accountImg);
        }
 
        String url_video = entity.getUrl_video();
        if (url_video != null) {
            stmt.bindString(9, url_video);
        }
        stmt.bindLong(10, entity.getHeight());
 
        String len = entity.getLen();
        if (len != null) {
            stmt.bindString(11, len);
        }
        stmt.bindLong(12, entity.getMomId());
 
        String playCount = entity.getPlayCount();
        if (playCount != null) {
            stmt.bindString(13, playCount);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(14, title);
        }
        stmt.bindLong(15, entity.getVideoId());
        stmt.bindLong(16, entity.getWidth());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeVideo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }
        stmt.bindLong(3, entity.getAudit());
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(4, cover);
        }
        stmt.bindLong(5, entity.getCreateTime());
 
        String gifCover = entity.getGifCover();
        if (gifCover != null) {
            stmt.bindString(6, gifCover);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(7, accountName);
        }
 
        String accountImg = entity.getAccountImg();
        if (accountImg != null) {
            stmt.bindString(8, accountImg);
        }
 
        String url_video = entity.getUrl_video();
        if (url_video != null) {
            stmt.bindString(9, url_video);
        }
        stmt.bindLong(10, entity.getHeight());
 
        String len = entity.getLen();
        if (len != null) {
            stmt.bindString(11, len);
        }
        stmt.bindLong(12, entity.getMomId());
 
        String playCount = entity.getPlayCount();
        if (playCount != null) {
            stmt.bindString(13, playCount);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(14, title);
        }
        stmt.bindLong(15, entity.getVideoId());
        stmt.bindLong(16, entity.getWidth());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public HomeVideo readEntity(Cursor cursor, int offset) {
        HomeVideo entity = new HomeVideo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tag
            cursor.getInt(offset + 2), // audit
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cover
            cursor.getLong(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gifCover
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // accountName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // accountImg
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // url_video
            cursor.getInt(offset + 9), // height
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // len
            cursor.getLong(offset + 11), // momId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // playCount
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // title
            cursor.getInt(offset + 14), // videoId
            cursor.getInt(offset + 15) // width
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeVideo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAudit(cursor.getInt(offset + 2));
        entity.setCover(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.getLong(offset + 4));
        entity.setGifCover(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccountName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccountImg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUrl_video(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHeight(cursor.getInt(offset + 9));
        entity.setLen(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMomId(cursor.getLong(offset + 11));
        entity.setPlayCount(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTitle(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVideoId(cursor.getInt(offset + 14));
        entity.setWidth(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HomeVideo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(HomeVideo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeVideo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
