package com.wei.lolbox.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wei.lolbox.model.msg.Match;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATCH".
*/
public class MatchDao extends AbstractDao<Match, String> {

    public static final String TABLENAME = "MATCH";

    /**
     * Properties of entity Match.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Weight = new Property(3, String.class, "weight", false, "WEIGHT");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property ReadCount = new Property(5, String.class, "readCount", false, "READ_COUNT");
        public final static Property Video = new Property(6, String.class, "video", false, "VIDEO");
        public final static Property Comment_id = new Property(7, String.class, "comment_id", false, "COMMENT_ID");
        public final static Property Photo = new Property(8, String.class, "photo", false, "PHOTO");
        public final static Property SrcPhoto = new Property(9, String.class, "srcPhoto", false, "SRC_PHOTO");
        public final static Property ArtId = new Property(10, String.class, "artId", false, "ART_ID");
        public final static Property CommentSum = new Property(11, int.class, "commentSum", false, "COMMENT_SUM");
        public final static Property CommentUrl = new Property(12, String.class, "commentUrl", false, "COMMENT_URL");
        public final static Property HasVideo = new Property(13, int.class, "hasVideo", false, "HAS_VIDEO");
        public final static Property DestUrl = new Property(14, String.class, "destUrl", false, "DEST_URL");
        public final static Property Type = new Property(15, String.class, "type", false, "TYPE");
    }


    public MatchDao(DaoConfig config) {
        super(config);
    }
    
    public MatchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATCH\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"WEIGHT\" TEXT," + // 3: weight
                "\"TIME\" TEXT," + // 4: time
                "\"READ_COUNT\" TEXT," + // 5: readCount
                "\"VIDEO\" TEXT," + // 6: video
                "\"COMMENT_ID\" TEXT," + // 7: comment_id
                "\"PHOTO\" TEXT," + // 8: photo
                "\"SRC_PHOTO\" TEXT," + // 9: srcPhoto
                "\"ART_ID\" TEXT," + // 10: artId
                "\"COMMENT_SUM\" INTEGER NOT NULL ," + // 11: commentSum
                "\"COMMENT_URL\" TEXT," + // 12: commentUrl
                "\"HAS_VIDEO\" INTEGER NOT NULL ," + // 13: hasVideo
                "\"DEST_URL\" TEXT," + // 14: destUrl
                "\"TYPE\" TEXT);"); // 15: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATCH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Match entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(4, weight);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String readCount = entity.getReadCount();
        if (readCount != null) {
            stmt.bindString(6, readCount);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(7, video);
        }
 
        String comment_id = entity.getComment_id();
        if (comment_id != null) {
            stmt.bindString(8, comment_id);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(9, photo);
        }
 
        String srcPhoto = entity.getSrcPhoto();
        if (srcPhoto != null) {
            stmt.bindString(10, srcPhoto);
        }
 
        String artId = entity.getArtId();
        if (artId != null) {
            stmt.bindString(11, artId);
        }
        stmt.bindLong(12, entity.getCommentSum());
 
        String commentUrl = entity.getCommentUrl();
        if (commentUrl != null) {
            stmt.bindString(13, commentUrl);
        }
        stmt.bindLong(14, entity.getHasVideo());
 
        String destUrl = entity.getDestUrl();
        if (destUrl != null) {
            stmt.bindString(15, destUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(16, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Match entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(4, weight);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String readCount = entity.getReadCount();
        if (readCount != null) {
            stmt.bindString(6, readCount);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(7, video);
        }
 
        String comment_id = entity.getComment_id();
        if (comment_id != null) {
            stmt.bindString(8, comment_id);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(9, photo);
        }
 
        String srcPhoto = entity.getSrcPhoto();
        if (srcPhoto != null) {
            stmt.bindString(10, srcPhoto);
        }
 
        String artId = entity.getArtId();
        if (artId != null) {
            stmt.bindString(11, artId);
        }
        stmt.bindLong(12, entity.getCommentSum());
 
        String commentUrl = entity.getCommentUrl();
        if (commentUrl != null) {
            stmt.bindString(13, commentUrl);
        }
        stmt.bindLong(14, entity.getHasVideo());
 
        String destUrl = entity.getDestUrl();
        if (destUrl != null) {
            stmt.bindString(15, destUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(16, type);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Match readEntity(Cursor cursor, int offset) {
        Match entity = new Match( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // weight
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // readCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // video
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // comment_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // photo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // srcPhoto
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // artId
            cursor.getInt(offset + 11), // commentSum
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // commentUrl
            cursor.getInt(offset + 13), // hasVideo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // destUrl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Match entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWeight(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReadCount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComment_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhoto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSrcPhoto(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setArtId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCommentSum(cursor.getInt(offset + 11));
        entity.setCommentUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHasVideo(cursor.getInt(offset + 13));
        entity.setDestUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Match entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Match entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Match entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
