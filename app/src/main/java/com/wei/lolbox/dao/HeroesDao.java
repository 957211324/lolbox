package com.wei.lolbox.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wei.lolbox.model.discover.Heroes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEROES".
*/
public class HeroesDao extends AbstractDao<Heroes, String> {

    public static final String TABLENAME = "HEROES";

    /**
     * Properties of entity Heroes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", true, "NAME");
        public final static Property Display_name = new Property(1, String.class, "display_name", false, "DISPLAY_NAME");
        public final static Property Gold = new Property(2, String.class, "gold", false, "GOLD");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Coupon = new Property(4, String.class, "coupon", false, "COUPON");
        public final static Property Id = new Property(5, int.class, "id", false, "ID");
    }

    private DaoSession daoSession;


    public HeroesDao(DaoConfig config) {
        super(config);
    }
    
    public HeroesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEROES\" (" + //
                "\"NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: name
                "\"DISPLAY_NAME\" TEXT," + // 1: display_name
                "\"GOLD\" TEXT," + // 2: gold
                "\"TITLE\" TEXT," + // 3: title
                "\"COUPON\" TEXT," + // 4: coupon
                "\"ID\" INTEGER NOT NULL );"); // 5: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEROES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Heroes entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String display_name = entity.getDisplay_name();
        if (display_name != null) {
            stmt.bindString(2, display_name);
        }
 
        String gold = entity.getGold();
        if (gold != null) {
            stmt.bindString(3, gold);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String coupon = entity.getCoupon();
        if (coupon != null) {
            stmt.bindString(5, coupon);
        }
        stmt.bindLong(6, entity.getId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Heroes entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String display_name = entity.getDisplay_name();
        if (display_name != null) {
            stmt.bindString(2, display_name);
        }
 
        String gold = entity.getGold();
        if (gold != null) {
            stmt.bindString(3, gold);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String coupon = entity.getCoupon();
        if (coupon != null) {
            stmt.bindString(5, coupon);
        }
        stmt.bindLong(6, entity.getId());
    }

    @Override
    protected final void attachEntity(Heroes entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Heroes readEntity(Cursor cursor, int offset) {
        Heroes entity = new Heroes( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // display_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gold
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coupon
            cursor.getInt(offset + 5) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Heroes entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDisplay_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGold(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoupon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Heroes entity, long rowId) {
        return entity.getName();
    }
    
    @Override
    public String getKey(Heroes entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Heroes entity) {
        return entity.getName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
